// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Advertisements;

public class LevelManager
{
	private bool IsInitialized = false;

	#region Singleton
	private static object _lockObject = new object();
	
	private static LevelManager _instance;
	public static LevelManager Instance
	{
		get
		{
			lock (_lockObject)
			{
				if(_instance==null)
					_instance = new LevelManager();
			}
			
			return _instance;
		}
	}
	#endregion

	public List<Level> Levels {
		get;
		set;
	}

	public Level ActiveLevel {
		get;
		set;
	}

	public bool IsInGamePlay {
		get{
			bool isInGamePlay = LevelManager.Instance.ActiveLevel != null && !LevelManager.Instance.ActiveLevel.CurrentCompleted;
			return isInGamePlay;
		}
	}

	public bool IsPaused {
		get;
		set;
	}

	public int LoadedLevelCount {
		get{
			if(!PlayerPrefs.HasKey("LoadedLevelCount"))
			{
				PlayerPrefs.SetInt("LoadedLevelCount", 0);
			}
			return PlayerPrefs.GetInt("LoadedLevelCount");
		}
		set
		{
			PlayerPrefs.SetInt("LoadedLevelCount", value);
			PlayerPrefs.Save();
		}
	}
	
	public LevelManager ()
	{
		Levels = new List<Level>();
	}

	/// <summary>
	/// todo: async
	/// </summary>
	/// <param name="levelName">Level name.</param>
	public void LoadLevel(Level level)
	{
		ParticleManagerBehavior.Conditioner.ClearAll();

		ActiveLevel = level;
		ActiveLevel.CurrentCompleted = false;

		LoadedLevelCount = LoadedLevelCount + 1;

		Debug.Log("Loaded Level Count is " + LoadedLevelCount);

		if(LoadedLevelCount % 7 == 0 && Advertisement.IsReady())
		{
			Advertisement.Show(null, new ShowOptions {
				resultCallback = result => {
					Application.LoadLevel("LoadingScene");
				}
			});
		}
		else
		{
			Application.LoadLevel("LoadingScene");
		}
	}

	public void LoadNextLevel(bool loadFromStartup)
	{
		Level nextLevel;

		if(loadFromStartup)
		{
			nextLevel = Levels.FirstOrDefault(k=>k.Completed == false);
			if(nextLevel == null) // tum level'lar bitmisse
			{
				//nextLevel = Levels[0];
				Application.LoadLevel("SelectLevel");
				return;
			}
		}
		else // load from current level
		{
			var nextLevelIndex = Levels.IndexOf(ActiveLevel) + 1;

			if(nextLevelIndex >= Levels.Count)
			{
				// Butun levellar bitti
				if(!PlayerPrefs.HasKey("FirstGameComplete"))
				{
					PlayerPrefs.SetInt("FirstGameComplete", 1);
					Application.LoadLevel("ThankYouScene");
				}
				else
				{
					Application.LoadLevel("SelectLevel");
				}
				return; // gereksiz dimi? asdjkahsjasdjasdqpiw
			}
			nextLevel = Levels[nextLevelIndex];
		}

		LoadLevel(nextLevel);
	}

	private string complatedFlagFormat = "Level_{0}_Completed";
	private string complatedWithStarFlagFormat = "Level_{0}_StarCount";

	public void SetLevelState (Level level)
	{
		string fullCompletedKey = string.Format(complatedFlagFormat, level.Name);
		string fullCompletedWithStarKey = string.Format(complatedWithStarFlagFormat, level.Name);

		int state = level.Completed ? 1 : 0;
		
		PlayerPrefs.SetInt(fullCompletedKey, state);

		PlayerPrefs.SetInt(fullCompletedWithStarKey, level.CompletedWithStarsCount);

		PlayerPrefs.Save();
	}

	public void SetLevelStates()
	{
		foreach (var current in Levels)
		{
			string fullCompletedKey = string.Format(complatedFlagFormat, current.Name);
			if(PlayerPrefs.HasKey(fullCompletedKey) && PlayerPrefs.GetInt(fullCompletedKey) == 1)
			{
				current.Completed = true;
			}

			string fullCompletedWithStarKey = string.Format(complatedWithStarFlagFormat, current.Name);
			if(PlayerPrefs.HasKey(fullCompletedWithStarKey))
			{
				current.CompletedWithStarsCount = PlayerPrefs.GetInt(fullCompletedWithStarKey);
			}
		}
		
		PlayerPrefs.Save();
	}

	public void Initialize()
	{
		if(IsInitialized)
			return;

		for (int i = 1; i < 31; i++)
		{
			var newLevel = new Level();
			newLevel.Name = "Level" + i;
			newLevel.Title = "Level " + i;

			Levels.Add(newLevel);
		}

		SetLevelStates();

		IsInitialized = true;
	}

}